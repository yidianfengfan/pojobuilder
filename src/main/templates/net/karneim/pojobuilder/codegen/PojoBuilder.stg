delimiters "<", ">"

classTemplate(builderClassTM) ::= <<
<builderClassTM.package:packageTemplate()>
<builderClassTM.imports:importTemplate()>
<builderClassTM.generated:generatedTemplate()>
public <builderClassTM:abstractTemplate()>class <builderClassTM.name> <builderClassTM.superclass:extendsTemplate()><builderClassTM:implementsTemplate()>{
    <builderClassTM.selfField:selfFieldTemplate()>
    <builderClassTM.fields:fieldTemplate()>
    <builderClassTM.constructor:constructorTemplate()>
    <builderClassTM.setters:setterTemplate()>
    <builderClassTM.cloneMethod:cloneMethodTemplate()>
    <builderClassTM.butMethod:butMethodTemplate()>
    <builderClassTM.copyMethod:copyMethodTemplate()>
    <builderClassTM.buildMethod:buildTemplate()>
    <builderClassTM.builderFactoryMethod:builderFactoryTemplate()>
    <builderClassTM.buildHelperMethod:buildHelperTemplate()>
}
>>

packageTemplate(packageTM) ::= <<
package <packageTM>;

>>

importTemplate(importTM) ::= <<
import <importTM>;

>>

generatedTemplate(generatedTM) ::= <<
@Generated("<generatedTM.name>")
>>

abstractTemplate(builderClassTM) ::= <<
<if(builderClassTM.abstractClass)>abstract <endif>
>>

extendsTemplate(superclassTM) ::= <<extends <superclassTM.name> >>

implementsTemplate(builderClassTM) ::= <<
<if(!builderClassTM.interfaces.empty)>implements <builderClassTM.interfaces; separator=", "> <endif>
>>

selfFieldTemplate(selfFieldTM) ::= <<
protected <selfFieldTM.type> self;
>>

fieldTemplate(fieldTM) ::= <<


protected <fieldTM.type> value$<fieldTM.name>;<if(fieldTM.mandatory)> // mandatory construction parameter<endif>
protected boolean isSet$<fieldTM.name> = false;
>>

constructorTemplate(constructorTM) ::= <<


public <constructorTM.name>() {
    self = (<constructorTM.selfCast>)this;
}
>>

setterTemplate(setterTM) ::= <<


public <setterTM.returnType> <setterTM.name>(<setterTM.type> aValue) {
    value$<setterTM.fieldname> = aValue;
    isSet$<setterTM.fieldname> = true;
    return self;
}
>>

cloneMethodTemplate(cloneMethodTM) ::= <<


@Override
public Object clone() {
    try {
        @SuppressWarnings("unchecked")
        <cloneMethodTM.selfType> result = (<cloneMethodTM.selfType>)super.clone();
        result.self = result;
        return result;
    } catch (CloneNotSupportedException e) {
        throw new InternalError(e.getMessage());
    }
}
>>

butMethodTemplate(butMethodTM) ::= <<


@SuppressWarnings("unchecked")
public <butMethodTM.returnType> but() {
    return (<butMethodTM.returnType>)clone();
}
>>

copyMethodTemplate(copyMethodTM) ::= <<


public <copyMethodTM.returnType> copy(<copyMethodTM.pojoType> original) {
    <copyMethodTM.assignments:assignmentTemplate()>
    return self;
}
>>

assignmentTemplate(assignmentTM) ::= <<

<assignmentTM.setter>(original.<assignmentTM.accessor:accessorTemplate()>);
>>

accessorTemplate(accessorTM) ::= <<
<accessorTM.name><if(accessorTM.method)>()<endif>
>>

buildTemplate(buildMethodTM) ::= <<


<if(buildMethodTM.override)>@Override<endif>
public <buildMethodTM.returnType> build() {
    <buildMethodTM.returnType> result = <buildMethodTM.construction:constructionTemplate()>;
    <buildMethodTM.setterCalls:setterCallTemplate()>
    <buildMethodTM.assignments:buildAssignmentTemplate()>
    return result;
}
>>

constructionTemplate(constructionTM) ::= <<
<if(constructionTM.constructorCall)>new <endif><constructionTM.methodName>(<constructionTM.arguments:argumentTemplate(); separator=", ">)
>>

argumentTemplate(argumentTM) ::= <<
value$<argumentTM.name>
>>

setterCallTemplate(setterCallTM) ::= <<

if (isSet$<setterCallTM.fieldname>) {
    result.<setterCallTM.methodName>(value$<setterCallTM.fieldname>);
}
>>

buildAssignmentTemplate(buildAssignmentTM) ::= <<

if (isSet$<buildAssignmentTM.fieldname>) {
    result.<buildAssignmentTM.pojoFieldname> = value$<buildAssignmentTM.fieldname>;
}
>>

builderFactoryTemplate(builderFactoryMethodTM) ::= <<


public static <genericsTemplate(builderFactoryMethodTM.generics)><builderFactoryMethodTM.returnType> <builderFactoryMethodTM.name>() {
    return new <builderFactoryMethodTM.returnType>();
}
>>

genericsTemplate(generics) ::= <<
<if(!generics.empty)>\<<csvTemplate(generics)>\> <endif>
>>


csvTemplate(list) ::= <<
<list; separator=", ">
>>


buildHelperTemplate(buildHelperMethodTM) ::= <<


public static <genericsTemplate(buildHelperMethodTM.generics)><buildHelperMethodTM.returnType> <buildHelperMethodTM.name>(<buildHelperMethodTM.parameterType> builder) {
    return builder.build();
}
>>
